user  root;

#设置进程数量通常它应该和cpu数量对等，但是不要超过8
worker_processes  4;
#绑定对应cpu避免频繁切换影响性能
worker_cpu_affinity auto;
#设置错误日志级别
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# 事件模型
events {
    # 设置工作进程最大连接数
    worker_connections  1024;
    #让nginx自动选择最优事件处理模型
    #use epoll;
}

http {

#--------------------------------------基础配置--------------------------------------
    include       /etc/nginx/mime.types;
    #默认的响应类型
    default_type  application/octet-stream;
    #默认字符集
    charset utf-8;     
    #定义日志格式
    log_format  main  '$http_user_agent' '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '"$args" "$request_uri" - "$request_filename" - "$realpath_root" - "$document_root" - "$document_uri"'
		      '"$scheme://$server_name:$server_port-$server_addr" "$upstream_addr-$upstream_status-$upstream_cache_status"';
    
    #暂时关闭连接日志，有需要可以打开
    #access_log  /var/log/nginx/access.log  main;
    #access_log  /var/log/nginx/${host}.access.log  main;
    #dns 解析有需要可以打开
    resolver 114.114.114.114;
    #在此配置中，使用 SF_NODISKIO 标志调用 sendfile() 使其不会在磁盘 I/O 上阻塞，而是报告数据不在内存中。 nginx 然后通过读取一个字节来启动异步数据加载。在第一次读取时，FreeBSD 内核将文件的前 128K 字节加载到内存中，尽管下一次读取只会加载 16K 块中的数据。这可以使用 read_ahead 指令进行更改。
    sendfile        on;
    #设置传输响应给客户端的超时时间。超时仅设置在两次连续的写操作之间，而不是用于整个响应的传输。如果客户端在这段时间内没有收到任何消息，则连接关闭。
    send_timeout 60s;
    #在 FreeBSD 上启用或禁用 TCP_NOPUSH 套接字选项或在 Linux 上使用 TCP_CORK 套接字选项。这些选项仅在使用 sendfile 时启用。启用该选项允许
    #tcp_nopush     on;
    #会话保持时间
    keepalive_timeout  65s;

#--------------------------------------gzip配置--------------------------------------
    #是否开启gzip压缩
    gzip  on;
    #最小压缩大小
    gzip_min_length 1k;
    #压缩缓冲区
    gzip_buffers 4 32k; 
    #压缩基本1-6基本越高越耗cpu
    gzip_comp_level 4;
    #支持的压缩类型
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    #禁用ie6及以下gzip规则
    gzip_disable "MSIE [1-6].";
    #开启gzip校验，只有客户端运行才进行
    gzip_vary on;

#--------------------------------------client客户端配置--------------------------------------
    #定义读取客户端请求标头的超时时间。如果客户端在此时间内未传输整个标头，则请求将因 408（请求超时）错误而终止。
    client_header_timeout 15s;
    #定义读取客户端请求正文的超时时间。超时仅针对两次连续读取操作之间的一段时间设置，而不是针对整个请求正文的传输。如果客户端在此时间内未传输任何内容，则请求将因 408（请求超时）错误而终止
    client_body_timeout 60s;
    #设置读取客户端请求正文的缓冲区大小。如果请求正文大于缓冲区，则将整个正文或仅其一部分写入临时文件。默认情况下，缓冲区大小等于两个内存页。这是 x86、其他 32 位平台和 x86-64 上的 8K。在其他 64 位平台上通常为 16K。
    client_body_buffer_size 512k;
    #设置读取客户端请求标头的缓冲区大小。对于大多数请求，1K 字节的缓冲区就足够了。但是，如果请求包含长 cookie 或来自 WAP 客户端，则它可能不适合 1K。如果请求行或请求头字段不适合此缓冲区，则分配由 large_client_header_buffers 指令配置的更大缓冲区。
    client_header_buffer_size 4k;
    #设置客户端请求正文的最大允许大小。如果请求中的大小超过配置值，则向客户端返回 413（请求实体太大）错误。请注意，浏览器无法正确显示此错误。将 size 设置为 0 将禁用对客户端请求正文大小的检查。
    #当前设置500MB这是为了兼容老程序所设置的值。正常情况下建议下调到25MB或更小，对于大文件应该采用分片上传。
    client_max_body_size 500m;
    #设置用于读取大型客户端请求标头的缓冲区的最大数量和大小。请求行不能超过一个缓冲区的大小，否则会向客户端返回 414（Request-URI Too Large）错误。请求头域也不能超过一个缓冲区的大小，否则返回400（Bad Request）错误给客户端。缓冲区仅根据需要分配。默认情况下，缓冲区大小等于 8K 字节。如果在请求处理结束后连接转换为保持活动状态，则这些缓冲区将被释放。
    large_client_header_buffers 4 8k;

#--------------------------------------proxy代理配置--------------------------------------
    #定义与代理服务器建立连接的超时时间。需要注意的是，这个超时时间通常不能超过 75 秒。
    proxy_connect_timeout 30s;
    #设置将请求传输到代理服务器的超时时间。超时仅设置在两次连续的写操作之间，而不是针对整个请求的传输。如果代理服务器在此时间内没有收到任何信息，则连接将关闭。
    proxy_send_timeout  60s;
    #定义从代理服务器读取响应的超时时间。超时仅在两次连续读取操作之间设置，而不是针对整个响应的传输。如果代理服务器在此时间内未传输任何内容，则连接将关闭。
    proxy_read_timeout  60s;
    #为单个连接设置用于从代理服务器读取响应的缓冲区的数量和大小。默认情况下，缓冲区大小等于一页内存。这是 4K 或 8K，具体取决于平台。
    proxy_buffers 4 64k;
    #设置用于读取从代理服务器收到的响应的第一部分的缓冲区大小。这部分通常包含一个小的响应头。默认情况下，缓冲区大小等于一页内存。这是 4K 或 8K，具体取决于平台。然而，它可以做得更小。
    proxy_buffer_size 16k;
    #当对来自代理服务器的响应启用缓冲时，限制缓冲区的总大小，当响应尚未完全读取时，可以忙于向客户端发送响应。同时，其余缓冲区可用于读取响应，并在需要时将部分响应缓冲到临时文件。默认情况下，大小受 proxy_buffer_size 和 proxy_buffers 指令设置的两个缓冲区大小的限制。
    proxy_busy_buffers_size 128k;
    #当启用缓冲从代理服务器到临时文件的响应时，限制一次写入临时文件的数据大小。默认情况下，大小受 proxy_buffer_size 和 proxy_buffers 指令设置的两个缓冲区的限制。临时文件的最大大小由 proxy_max_temp_file_size 指令设置。
    proxy_temp_file_write_size 128k;
    #指定在哪些情况下应将请求传递到下一个服务器
    #ps：该部分只有配置了负载均衡才有效
    proxy_next_upstream http_502 http_504 http_404 error timeout invalid_header;

    include /etc/nginx/conf.d/*.conf;
    #将错误码重定向指定页面，仅当对应server不存在该节点时才生效
    #error_page 500 501 502 503 504 http://xxx/500.html;
    #error_page 400 403 404 405 408 410 412 413 414 415 /400.html;    

    server {
	#设置默认服务，如果不设置将会采用第一个server节点
        listen 80 default_server;
        #access_log  /var/log/nginx/default_access.log  main;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
        root   /usr/share/nginx/html;
       }
    }
}
